version: '3.5'

## Creates a full stack development environment containing:
##  PHP 7.2.2
##  Apache
##  MySQL
##  MySQL web interface
##  VS Code web IDE
##  Reverse proxy to aggregate all the web resources


## We list all the "services" - each "service" is a docker container
##
## Note that each service has a "networks" definition; this allows us to define one or more
## virtual networks. Containers on the same network can see each other.
services:

  ## The database server (mysql)
  ##
  ## This container has no interface, but may be accessed via the command line:
  ## docker run -it --rm --network full_stack mysql:8.0.15 mysql -hmysql -uroot -pp@ssw0rd
  ##
  ## "docker run -it --rm" will run a docker container with a prompt and delete the container after it terminates
  ## "--network full_stack" will run the container on the same network as the services (the MySQL server, in particular)
  ## "mysql:8.0.15" is the container to run
  ## "mysql -hmysql -uroot -pp@ssword" will run the "mysql" command with
  ##   *the host (-h) set to "mysql" (the container nane of the MySQL server)
  ##   *the user (-u) "root"
  ##   *the password (-p) "p@ssw0rd" (NOTE: this must match the password assigned to the root user in the MySQL container)
  db:
    image: mysql:8.0.15
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - full_stack
    ports:
      - 3306:3306
    environment:
      ## The root password for SQL
      MYSQL_ROOT_PASSWORD: p@ssw0rd
    volumes:
      ## This volume allows us to persist the SQL data
      - "mysql:/var/lib/mysql"

  ## A web interface to the database
  ##
  ## http://localhost:18080/?server=db&username=root
  adminer:
    image: adminer:4.7.1-standalone
    container_name: adminer
    networks:
      - full_stack
    depends_on:
      - db
    ports:
      - 18080:8080

  ## A web-based IDE (Visual Studio Code)
  ##
  ## http://localhost:18081/
  ide:
    build:
      context: ide
    image: ide
    container_name: ide
    command: --allow-http --no-auth
    ## The IDE needs to wait until the web server has started before mounting the shared source volume
    ## in order to apply ownership/write permissions
    depends_on:
      - web
    networks:
      - full_stack
    ports:
      - 18081:8443
    volumes:
      ## This maps a local volume to the project files (the same volume for the web server)
      - "source:/home/coder/project/"
      # This volume allows us to persist the project files
      - "vscode-settings:/home/coder/.local/"

  ## The web server used to serve the HTTP app
  ##
  ## http://localhost:18082/
  web:
    ## Build a docker image for PHP with the "mysqli" extension enabled
    build:
      context: php_apache_mysqli
    image: php-apache-mysqli
    container_name: web
    networks:
      - full_stack
    depends_on:
      - db
    ports:
      - 18082:80
    volumes:
      ## This maps a local volume to the root of the web server, so the files can be served (same as the IDE)
      - "source:/var/www/html"

  ## The reverse proxy
  ##
  ## http://localhost:80
  proxy:
    ## Build a custom nginx container with a specific config and index.html
    build:
      context: proxy
    image: reverse_proxy
    container_name: proxy
    networks:
      - full_stack
    depends_on:
      - web
      - ide
      - adminer
    ports:
      - 10080:80

## A list of the virtual networks to use
networks:
  ## All the services reside on the same network, 'fullstack'
  full_stack:
    name: full_stack

volumes:
  source:
  vscode-settings:
  mysql:
